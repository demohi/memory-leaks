<!--
    Powered By nodePPT - This is probably the best web presentation tool so far!
    version: 0.9.8-3
    site: https://github.com/ksky521/nodePPT
-->
<!doctype html>
<html>
<head>
    <meta charset="UTF-8">
    <title>搞定JavaScript 内存泄露 - By mdemo</title>
    <link rel="stylesheet" media="all" href="./css/nodeppt2.0.css">
    <link rel="stylesheet" media="only screen and (max-device-width: 480px)" href="./css/phone.css">
    <link rel="stylesheet" media="print" href="./css/pdf.css">
    <link rel="stylesheet" href="./js/highlight/styles/monokai_sublime.css">
    <link rel="stylesheet" href="./css/font-awesome.css">
</head>
<body>
<div class="slides">
    <slides id="container">
        <slide class="slide" data-transition="kontext"><section class="slide-wrapper"><hgroup>
<h1>搞定 JavaScript 内存泄露</h1>

</hgroup><article>

<style type="text/css">
iframe{
    background: transparent;
}
.cases .user {
    margin-right: 80px;
    min-width: 40%;
}
.case {
    float: left;
}

.cases {
    margin-top: 60px;
    zoom: 1;
}
</style><div class="cases">
        <div class="case user">
          <h2>By mdemo</h2>
          <p>GitHub profile</p>
          <div class="github-card" data-user="demohi"></div><p>        </div>
        <div class="case repo">
          <h2>Repo Card</h2>
          <p>GitHub repository</p>
          <div class="github-card" data-user="demohi" data-repo="memory-leaks">&gt;</div>
        </div>
      </div></p>
<script src="http://lab.lepture.com/github-cards/widget.js"></script>
</article></section></slide>
<slide class="slide" data-transition="vkontext"><section class="slide-wrapper"><article class="flexbox vcenter">
<h1>内存泄露？</h1>
<h2>JavaScript不是具有自动垃圾回收机制吗？</h2>

</article></section></slide>
<slide class="slide" data-transition="circle"><section class="slide-wrapper"><hgroup>
<h2>先了解一下背景</h2>

</hgroup><article>

<ul class="moveIn">
<li>JavaScript 变量的内存占用</li>
<li>chrome profile 工具</li>
<li>GC 回收原理</li>
</ul>

</article></section></slide>
<slide class="slide" data-transition="cover-circle"><section class="slide-wrapper"><hgroup>
<h2>5种基本类型</h2>

</hgroup><article>

<ul class="moveIn">
<li>数字(Numbers) (如 3.14159..)</li>
<li>布尔值(Booleans) (true或false)</li>
<li>字符型(Strings) (如 &#39;mdemo&#39;)</li>
<li>Null</li>
<li>Undefined</li>
<li><blockquote>
<p>它们不会引用别的值，它们只会是叶子节点或终止节点。</p>
</blockquote>
</li>
</ul>

</article></section></slide>
<slide class="slide" data-transition="cover-diamond"><section class="slide-wrapper"><hgroup>
<h2>动态的属性</h2>

</hgroup><article>

<pre><code>typeof &#39;111&#39;; 
typeof new String(&#39;111&#39;)
var s = &#39;123&#39;;
var s2 = new String(&#39;123&#39;);
s.color = &#39;red&#39;;
s2.color = &#39;red&#39;;
console.log(s.color);
console.log(s2.color);
</code></pre><ul class="moveIn">
<li>string</li>
<li>object</li>
<li>undefined</li>
<li>red</li>
</ul>

</article></section></slide>
<slide class="slide" data-transition="earthquake"><section class="slide-wrapper"><hgroup>
<h2>动态的属性</h2>

</hgroup><article>

<pre><code>var s1 = &#39;mdemo&#39;;
s1.color = &#39;red&#39;;
var s2 = s1.substring(2);

var s3 = new String(&#39;mdemo);
s3.color = &#39;red&#39;;
s3 = null;

var s4 = new String(&#39;mdemo);
var s2 = s4.substring(2);
s4 = null;
</code></pre>
</article></section></slide>
<slide class="slide" data-transition="cards"><section class="slide-wrapper"><hgroup>
<h2>复制变量值</h2>

</hgroup><article>

<pre><code>var num1 = 1;
var num2 = num1;
num1 = 3;
console.log(num2);
var obj1 = new Object();
var obj2 = obj1;
obj1.name = &#39;mdemo&#39;;
console.log(obj2.name);
</code></pre><ul class="moveIn">
<li>1</li>
<li>mdemo</li>
</ul>

</article></section></slide>
<slide class="slide" data-transition="glue"><section class="slide-wrapper"><hgroup>
<h2>传递参数</h2>

</hgroup><article>

<pre><code>function setName(obj){
    obj.name = &#39;mdemo&#39;;
}
var person = new Object();
setName(person);
console.log(person.name);
</code></pre><pre><code>function setName(obj){
    obj.name = &#39;mdemo&#39;;
    obj = new Object();
    obj.name = &#39;demohi&#39;;
}
var person = new Object();
setName(person);
console.log(person.name);
</code></pre><ul class="moveIn">
<li>mdemo</li>
<li>mdemo</li>
</ul>

</article></section></slide>
<slide class="slide" data-transition="glue"><section class="slide-wrapper"><hgroup>
<h2>传递参数</h2>

</hgroup><article>

<pre><code>function setName(obj){
    obj.name = &#39;mdemo&#39;;
    obj2 = obj;
    obj2.name = &#39;demohi&#39;;
}
var person = new Object();
setName(person);
console.log(person.name);
</code></pre><ul class="moveIn">
<li>demohi</li>
</ul>

</article></section></slide>
<slide class="slide" data-transition="stick"><section class="slide-wrapper"><hgroup>
<h2>对象删除</h2>

</hgroup><article>

<pre><code>var obj1 = new Object();
var obj2 = obj1;
obj1.name = &#39;mdemo&#39;;
obj1 = null;
console.log(obj2.name);
</code></pre><ul class="moveIn">
<li>mdemo</li>
</ul>

</article></section></slide>
<slide class="slide" data-transition="move"><section class="slide-wrapper"><hgroup>
<h2>内存中的对象</h2>

</hgroup><article>

<p><img src="http://boke.io/content/images/2014/12/objectsizes-1.png" alt=""></p>
<ul class="moveIn">
<li>如果我们把内存想象成一个包含基本类型(像数字和字符串)和对象(关联数组)的图表。它可能看起来像下面这幅一系列相关联的点组成的图。</li>
<li>对象自身直接使用</li>
<li>隐含的保持对其它对象的引用，这种方式会阻止垃圾回收(简称GC)对那些对象的自动回收处理。</li>
</ul>

</article></section></slide>
<slide class="slide" data-transition="newspaper"><section class="slide-wrapper"><hgroup>
<h2>内存中的对象</h2>

</hgroup><article>

<p><img src="http://boke.io/content/images/2014/12/profile.png" alt=""></p>
<ul>
<li>直接占用内存(Shallow Size，不包括引用的对象占用的内存)</li>
<li>占用总内存(Retained Size，包括引用的对象所占用的内存)</li>
</ul>

</article></section></slide>
<slide class="slide" data-transition="slide"><section class="slide-wrapper"><hgroup>
<h2>GC 回收</h2>

</hgroup><article>

<p><img src="http://boke.io/content/images/2014/12/gc.png" alt=""></p>
<ul class="moveIn">
<li>内存图从 root 开始，root 可以理解是浏览器中的 window 对象，Node.js 中的 Global 对象</li>
<li>9与10无法与 root 相连，将会被 GC 回收掉</li>
<li>节点离 root 的最近距离被称为distance，如下图可以在Heap Profiler中查看到</li>
<li>上图2的 distance 为1，8的 distance 为4</li>
</ul>

</article></section></slide>
<slide class="slide" data-transition="slide3"><section class="slide-wrapper"><hgroup>
<h2>GC 回收</h2>

</hgroup><article>

<p><img src="http://boke.io/content/images/2014/12/distance.png" alt=""></p>

</article></section></slide>
<slide class="slide" data-transition="horizontal3d"><section class="slide-wrapper"><hgroup>
<h1>准备一下调试环境</h1>
<h2>最新版的 chrome + 隐私模式</h2>

</hgroup><article>

<ul class="moveIn">
<li>最新版的 Chrome 可以拥有最佳的 devtools</li>
<li>隐私模式是为了避免插件等的干扰（调试的时候，关闭所有插件在隐私模式下开启）</li>
</ul>

</article></section></slide>
<slide class="slide" data-transition="horizontal"><section class="slide-wrapper"><hgroup>
<h1>工欲善其事,必先利其器</h1>
<h2>学习使用 chrome devtools</h2>

</hgroup><article>

<ul class="moveIn">
<li>使用 timeline发现内存泄露</li>
<li>使用 timeline 查看 GC Event 耗时</li>
<li>使用Heap Snapshot查看详细内存情况</li>
<li>使用  Heap Allocations</li>
</ul>

</article></section></slide>
<slide class="slide" data-transition="vertical3d"><section class="slide-wrapper"><hgroup>
<h2>使用 timeline发现内存泄露</h2>

</hgroup><article>

<p><a href="http://demohi.github.io/memory-leaks/examples/1-watch-the-memory-grow.html" target="_blank">Example 1: Watch the memory grow</a></p>
<p><img src="http://boke.io/content/images/2014/12/Snip20141203_22.png" alt=""></p>

</article></section></slide>
<slide class="slide" data-transition="zoomin"><section class="slide-wrapper"><hgroup>
<h2>使用 timeline 查看 GC Event 耗时</h2>

</hgroup><article>

<p><a href="http://demohi.github.io/memory-leaks/examples/2-watching-the-GC-work.html" target="_blank">Example 2: Watching the GC work</a></p>
<p><img src="http://boke.io/content/images/2014/12/Snip20141203_23.png" alt=""></p>

</article></section></slide>
<slide class="slide" data-transition="zoomout"><section class="slide-wrapper"><hgroup>
<h2>使用Heap Snapshot查看详细内存情况</h2>
<h3>Summary 视图</h3>

</hgroup><article>

<p><a href="http://demohi.github.io/memory-leaks/examples/3-scattered-objects.html" target="_blank">Example 3: Scattered objects</a></p>
<p><img src="http://boke.io/content/images/2014/12/Snip20141203_24.png" alt=""></p>

</article></section></slide>
<slide class="slide" data-transition="pulse"><section class="slide-wrapper"><hgroup>
<h2>使用Heap Snapshot查看详细内存情况</h2>
<h3>Compare 视图</h3>

</hgroup><article>

<p><a href="http://demohi.github.io/memory-leaks/examples/11-compare.html" target="_blank">Example 11:Verifying Action Cleanness</a></p>
<p><img src="http://boke.io/content/images/2014/12/Snip20141203_25.png" alt=""></p>

</article></section></slide>
<slide class="slide"><section class="slide-wrapper"><hgroup>
<h2>使用  Heap Allocations</h2>

</hgroup><article>

<p><a href="http://demohi.github.io/memory-leaks/examples/6-leaking-DOM-nodes.html" target="_blank">Example 6: Leaking DOM nodes</a></p>
<p><img src="http://boke.io/content/images/2014/12/Snip20141203_31.png" alt=""></p>

</article></section></slide>
<slide class="slide"><section class="slide-wrapper"><hgroup>
<h2>使用  Heap Allocations</h2>

</hgroup><article>

<ul class="moveIn">
<li>每条竖线代表一次新的内存生成</li>
<li>灰色的竖线说明内存被回收</li>
<li>蓝色的竖线说明生成后，没有被回收，有可能是内存泄露</li>
<li>可以选定特定的蓝线，查看这次生成的内容，方便查找内存泄露问题</li>
</ul>

</article></section></slide>
<slide class="slide"><section class="slide-wrapper"><hgroup>
<h2>实战</h2>

</hgroup><article>

<ul class="moveIn">
<li>Eval is evil (almost always)</li>
<li>dom引起的内存泄露</li>
</ul>

</article></section></slide>
<slide class="slide"><section class="slide-wrapper"><hgroup>
<h2>Eval is evil (almost always)</h2>

</hgroup><article>

<pre><code>function createEvalClosure() {
        var smallStr = &#39;x&#39;;
        var largeStr = new Array(1000000).join(&#39;x&#39;);
        return function eC() {
          eval(&#39;&#39;);
          return smallStr;
        };
      }
</code></pre>
</article></section></slide>
<slide class="slide"><section class="slide-wrapper"><hgroup>
<h2>Eval is evil (almost always)</h2>

</hgroup><article>

<p><a href="http://demohi.github.io/memory-leaks/examples/7-eval-is-evil-almost-always.html" target="_blank">Example 7: Eval is evil (almost always)</a>
<img src="http://boke.io/content/images/2014/12/Snip20141203_27.png" alt=""></p>

</article></section></slide>
<slide class="slide"><section class="slide-wrapper"><hgroup>
<h2>dom清空的内存泄露</h2>

</hgroup><article>

<p><img src="http://staticc.qiniudn.com/detached-nodes.gif" alt=""> </p>
<ul class="moveIn">
<li>黄色是指直接引用，红色是指间接引用</li>
<li>remove refB 变成黄色，由于有 js 直接引用</li>
<li>refB=null 后，变成红色，由于 refA 对 refB 间接引用</li>
</ul>

</article></section></slide>
<slide class="slide"><section class="slide-wrapper"><hgroup>
<h2>dom清空的内存泄露</h2>

</hgroup><article>

<p><a href="http://demohi.github.io/memory-leaks/examples/9-DOM-leaks-bigger-than-expected.html" target="_blank">Example 9: DOM leaks bigger than expected</a></p>
<p><img src="http://boke.io/content/images/2014/12/Snip20141203_34.png" alt=""></p>

</article></section></slide>
<slide class="slide"><section class="slide-wrapper"><hgroup>
<h2>总结</h2>

</hgroup><article>

<ul>
<li>一个小的 dom 引用，会导致巨大的内存泄露</li>
<li>谨慎使用全局变量，尤其是全局变量存在 dom 引用</li>
<li>即使手动清空</li>
<li>chrome 是神器</li>
</ul>

</article></section></slide>
<slide class="slide"><section class="slide-wrapper"><hgroup>
<h2>相关链接</h2>

</hgroup><article>

<ul>
<li><p><a href="https://github.com/demohi/memory-leaks/tree/gh-pages/examples" target="_blank">文中所有 example 源码</a></p>
</li>
<li><p><a href="http://demohi.github.io/memory-leaks/" target="_blank">example 索引</a></p>
</li>
</ul>

</article></section></slide>
<slide class="slide"><section class="slide-wrapper"><hgroup>
<h2>参考的页面&amp;致谢</h2>

</hgroup><article>

<ul>
<li><p><a href="https://github.com/CN-Chrome-DevTools/CN-Chrome-DevTools" target="_blank">Chrome 开发者工具中文手册，感谢良心翻译</a></p>
</li>
<li><p><a href="https://developer.chrome.com/devtools/docs/javascript-memory-profiling" target="_blank">chrome 官方文档需翻墙</a></p>
</li>
<li><p><a href="http://www.cnblogs.com/stenson/p/3951035.html" target="_blank">App之性能优化</a></p>
</li>
<li><p><a href="http://www.ibm.com/developerworks/library/wa-jsmemory/index.html" target="_blank">Understand memory leaks in JavaScript applications</a></p>
</li>
<li><p><a href="http://www.smashingmagazine.com/2012/06/12/javascript-profiling-chrome-developer-tools/" target="_blank">JavaScript Profiling With The Chrome Developer Tools</a></p>
</li>
<li><p><a href="http://javascript.info/tutorial/memory-leaks" target="_blank">Memory leaks</a></p>
</li>
<li>刘指导 &amp; 张小俊</li>
</ul>

</article></section></slide>
<slide class="slide"><section class="slide-wrapper"><hgroup>
<h2>广告时间---加入进来</h2>

</hgroup><article>

<ul>
<li><p><a href="https://github.com/mobframe/mobile-front-end-info-collection/issues" target="_blank"> 已经三个月大的移动前端技术周刊</a></p>
</li>
<li><p><a href="http://boke.io" target="_blank">文章是最好的积累---boke.io</a></p>
</li>
</ul>
<p><img src="http://bokeio.qiniudn.com/Snip20141204_48.png" alt=""></p>

</article></section></slide>
        <slide class="slide thank-you-slide segue nobackground">
            <article class="flexbox vleft auto-fadein">
                <h2>Q &amp; A</h2>
                <h3>&lt;Thank You!&gt;</h3>
            </article>
        </slide>
        <slide class="slide logoslide dark nobackground">
            <article class="flexbox vcenter">
              <h2 style="color: white;">Powered By nodePPT v0.9.8-3</h2>
            </article>
          </slide>
        <div class="slideTip" id="tip"></div>
    </slides>
</div>
<canvas id="drawBoard" class="draw-board" width="900" height="700"></canvas>
<div class="progress"><span id="progress"></span></div>
<div id="_buttons">
    <div class="_btn-box" id="_btn-box" style="display:none;">
        <button class="fa fa-arrow-circle-left" id="_btn-prev"></button>
        <button class="fa fa-arrow-circle-right" id="_btn-next"></button>
        <button class="fa fa-paint-brush" id="_btn-brush"></button>
        <button class="fa fa-compress" id="_btn-overview" data-toggle="fa fa-expand"></button>
    </div>
    <button class="fa fa-bars" id="_btn-bar"  data-toggle="fa fa-close"></button>
</div>
<script src="./js/mixjs/lib/mix.0.3.0.min.js"></script>
<script>
var base = location.protocol + '//' + location.host;

var path = location.pathname.split('/').filter(function(v){
    return !!v;
});
path.pop();
path = path.join('/');
MixJS.config({
    baseURL: [ base, path, 'js'].join('/')+'/'
});

</script>
<script src="./js/mixjs/lib/event/broadcast.js"></script>
<script src="./js/nodeppt.js"></script>
<script>
Slide.init({
    containerID: 'container',
    drawBoardID: 'drawBoard',
    slideClass: '.slide',
    buildClass: '.build',
    progressID: 'progress',
    transition: 'kontext',
    width: 1100,
    dir: './',
    
    //打开下面的注释就开启postMessage方式
    //访问网址127.0.0.1:8080/ppt/demo#client
    control:{
        type: 'postMessage',
        args:{
            isControl:  false
        }
    },
    
    tipID: 'tip'
});
MixJS.loadJS('highlight/hljs-0.8.js',function(){
    hljs.tabReplace = '  ';
    hljs.initHighlightingOnLoad();
});
</script>

</body>
</html>
